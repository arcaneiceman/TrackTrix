//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace Traktrix
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::Traktrix.Traktrix_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::Traktrix.Traktrix_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::Traktrix.Traktrix_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace Traktrix.Traktrix_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[41];
            _typeNameTable[0] = "Traktrix.AboutUs";
            _typeNameTable[1] = "Windows.UI.Xaml.Controls.SettingsFlyout";
            _typeNameTable[2] = "Windows.UI.Xaml.Controls.ContentControl";
            _typeNameTable[3] = "Traktrix.ExtendedSplash";
            _typeNameTable[4] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[5] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[6] = "Traktrix.FilterHelp";
            _typeNameTable[7] = "Microsoft.Advertising.WinRT.UI.AdControl";
            _typeNameTable[8] = "Windows.UI.Xaml.Controls.Control";
            _typeNameTable[9] = "String";
            _typeNameTable[10] = "Double";
            _typeNameTable[11] = "Boolean";
            _typeNameTable[12] = "WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions";
            _typeNameTable[13] = "Object";
            _typeNameTable[14] = "Windows.UI.Core.CoreCursorType";
            _typeNameTable[15] = "System.Enum";
            _typeNameTable[16] = "System.ValueType";
            _typeNameTable[17] = "Windows.UI.Xaml.DependencyObject";
            _typeNameTable[18] = "WinRTXamlToolkit.Controls.Extensions.ClipToBoundsHandler";
            _typeNameTable[19] = "Windows.UI.Core.CoreCursor";
            _typeNameTable[20] = "WinRTXamlToolkit.Controls.Extensions.CursorDisplayHandler";
            _typeNameTable[21] = "Traktrix.MainPage";
            _typeNameTable[22] = "Traktrix.Help";
            _typeNameTable[23] = "Traktrix.MusicGallery";
            _typeNameTable[24] = "Traktrix.Common.ObservableDictionary";
            _typeNameTable[25] = "Traktrix.Common.NavigationHelper";
            _typeNameTable[26] = "WinRTXamlToolkit.Controls.ImageToggleButton";
            _typeNameTable[27] = "Windows.UI.Xaml.Controls.Primitives.ToggleButton";
            _typeNameTable[28] = "Windows.UI.Xaml.Media.ImageSource";
            _typeNameTable[29] = "System.Uri";
            _typeNameTable[30] = "Windows.UI.Xaml.Media.Stretch";
            _typeNameTable[31] = "WinRTXamlToolkit.Controls.ImageButton";
            _typeNameTable[32] = "Windows.UI.Xaml.Controls.Button";
            _typeNameTable[33] = "Traktrix.PlayingPage";
            _typeNameTable[34] = "Traktrix.SongDetails";
            _typeNameTable[35] = "Traktrix.SongItem";
            _typeNameTable[36] = "Traktrix.PrivacyPolicy";
            _typeNameTable[37] = "Traktrix.ThemeChanger";
            _typeNameTable[38] = "Traktrix.TrixterMode";
            _typeNameTable[39] = "DemoApp.ViewModels.RecordViewModel";
            _typeNameTable[40] = "DemoApp.Common.BindableBase";

            _typeTable = new global::System.Type[41];
            _typeTable[0] = typeof(global::Traktrix.AboutUs);
            _typeTable[1] = typeof(global::Windows.UI.Xaml.Controls.SettingsFlyout);
            _typeTable[2] = typeof(global::Windows.UI.Xaml.Controls.ContentControl);
            _typeTable[3] = typeof(global::Traktrix.ExtendedSplash);
            _typeTable[4] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[5] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[6] = typeof(global::Traktrix.FilterHelp);
            _typeTable[7] = typeof(global::Microsoft.Advertising.WinRT.UI.AdControl);
            _typeTable[8] = typeof(global::Windows.UI.Xaml.Controls.Control);
            _typeTable[9] = typeof(global::System.String);
            _typeTable[10] = typeof(global::System.Double);
            _typeTable[11] = typeof(global::System.Boolean);
            _typeTable[12] = typeof(global::WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions);
            _typeTable[13] = typeof(global::System.Object);
            _typeTable[14] = typeof(global::Windows.UI.Core.CoreCursorType);
            _typeTable[15] = typeof(global::System.Enum);
            _typeTable[16] = typeof(global::System.ValueType);
            _typeTable[17] = typeof(global::Windows.UI.Xaml.DependencyObject);
            _typeTable[18] = typeof(global::WinRTXamlToolkit.Controls.Extensions.ClipToBoundsHandler);
            _typeTable[19] = typeof(global::Windows.UI.Core.CoreCursor);
            _typeTable[20] = typeof(global::WinRTXamlToolkit.Controls.Extensions.CursorDisplayHandler);
            _typeTable[21] = typeof(global::Traktrix.MainPage);
            _typeTable[22] = typeof(global::Traktrix.Help);
            _typeTable[23] = typeof(global::Traktrix.MusicGallery);
            _typeTable[24] = typeof(global::Traktrix.Common.ObservableDictionary);
            _typeTable[25] = typeof(global::Traktrix.Common.NavigationHelper);
            _typeTable[26] = typeof(global::WinRTXamlToolkit.Controls.ImageToggleButton);
            _typeTable[27] = typeof(global::Windows.UI.Xaml.Controls.Primitives.ToggleButton);
            _typeTable[28] = typeof(global::Windows.UI.Xaml.Media.ImageSource);
            _typeTable[29] = typeof(global::System.Uri);
            _typeTable[30] = typeof(global::Windows.UI.Xaml.Media.Stretch);
            _typeTable[31] = typeof(global::WinRTXamlToolkit.Controls.ImageButton);
            _typeTable[32] = typeof(global::Windows.UI.Xaml.Controls.Button);
            _typeTable[33] = typeof(global::Traktrix.PlayingPage);
            _typeTable[34] = typeof(global::Traktrix.SongDetails);
            _typeTable[35] = typeof(global::Traktrix.SongItem);
            _typeTable[36] = typeof(global::Traktrix.PrivacyPolicy);
            _typeTable[37] = typeof(global::Traktrix.ThemeChanger);
            _typeTable[38] = typeof(global::Traktrix.TrixterMode);
            _typeTable[39] = typeof(global::DemoApp.ViewModels.RecordViewModel);
            _typeTable[40] = typeof(global::DemoApp.Common.BindableBase);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_AboutUs() { return new global::Traktrix.AboutUs(); }
        private object Activate_3_ExtendedSplash() { return new global::Traktrix.ExtendedSplash(); }
        private object Activate_6_FilterHelp() { return new global::Traktrix.FilterHelp(); }
        private object Activate_7_AdControl() { return new global::Microsoft.Advertising.WinRT.UI.AdControl(); }
        private object Activate_18_ClipToBoundsHandler() { return new global::WinRTXamlToolkit.Controls.Extensions.ClipToBoundsHandler(); }
        private object Activate_20_CursorDisplayHandler() { return new global::WinRTXamlToolkit.Controls.Extensions.CursorDisplayHandler(); }
        private object Activate_21_MainPage() { return new global::Traktrix.MainPage(); }
        private object Activate_22_Help() { return new global::Traktrix.Help(); }
        private object Activate_23_MusicGallery() { return new global::Traktrix.MusicGallery(); }
        private object Activate_24_ObservableDictionary() { return new global::Traktrix.Common.ObservableDictionary(); }
        private object Activate_26_ImageToggleButton() { return new global::WinRTXamlToolkit.Controls.ImageToggleButton(); }
        private object Activate_31_ImageButton() { return new global::WinRTXamlToolkit.Controls.ImageButton(); }
        private object Activate_33_PlayingPage() { return new global::Traktrix.PlayingPage(); }
        private object Activate_34_SongDetails() { return new global::Traktrix.SongDetails(); }
        private object Activate_35_SongItem() { return new global::Traktrix.SongItem(); }
        private object Activate_36_PrivacyPolicy() { return new global::Traktrix.PrivacyPolicy(); }
        private object Activate_37_ThemeChanger() { return new global::Traktrix.ThemeChanger(); }
        private object Activate_38_TrixterMode() { return new global::Traktrix.TrixterMode(); }
        private object Activate_39_RecordViewModel() { return new global::DemoApp.ViewModels.RecordViewModel(); }
        private void MapAdd_24_ObservableDictionary(object instance, object key, object item)
        {
            var collection = (global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>)instance;
            var newKey = (global::System.String)key;
            var newItem = (global::System.Object)item;
            collection.Add(newKey, newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::Traktrix.Traktrix_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  Traktrix.AboutUs
                userType = new global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.SettingsFlyout"));
                userType.Activator = Activate_0_AboutUs;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 1:   //  Windows.UI.Xaml.Controls.SettingsFlyout
                xamlType = new global::Traktrix.Traktrix_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Windows.UI.Xaml.Controls.ContentControl
                xamlType = new global::Traktrix.Traktrix_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  Traktrix.ExtendedSplash
                userType = new global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_3_ExtendedSplash;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 4:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::Traktrix.Traktrix_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 5:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::Traktrix.Traktrix_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 6:   //  Traktrix.FilterHelp
                userType = new global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.SettingsFlyout"));
                userType.Activator = Activate_6_FilterHelp;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 7:   //  Microsoft.Advertising.WinRT.UI.AdControl
                userType = new global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_7_AdControl;
                userType.AddMemberName("ApplicationId");
                userType.AddMemberName("AdUnitId");
                userType.AddMemberName("Latitude");
                userType.AddMemberName("Longitude");
                userType.AddMemberName("IsEngaged");
                userType.AddMemberName("IsAutoRefreshEnabled");
                userType.AddMemberName("IsSuspended");
                xamlType = userType;
                break;

            case 8:   //  Windows.UI.Xaml.Controls.Control
                xamlType = new global::Traktrix.Traktrix_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 9:   //  String
                xamlType = new global::Traktrix.Traktrix_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 10:   //  Double
                xamlType = new global::Traktrix.Traktrix_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 11:   //  Boolean
                xamlType = new global::Traktrix.Traktrix_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 12:   //  WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions
                userType = new global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("SystemCursor");
                userType.AddMemberName("ClipToBounds");
                userType.AddMemberName("ClipToBoundsHandler");
                userType.AddMemberName("Cursor");
                userType.AddMemberName("CursorDisplayHandler");
                xamlType = userType;
                break;

            case 13:   //  Object
                xamlType = new global::Traktrix.Traktrix_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 14:   //  Windows.UI.Core.CoreCursorType
                userType = new global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Arrow", global::Windows.UI.Core.CoreCursorType.Arrow);
                userType.AddEnumValue("Cross", global::Windows.UI.Core.CoreCursorType.Cross);
                userType.AddEnumValue("Custom", global::Windows.UI.Core.CoreCursorType.Custom);
                userType.AddEnumValue("Hand", global::Windows.UI.Core.CoreCursorType.Hand);
                userType.AddEnumValue("Help", global::Windows.UI.Core.CoreCursorType.Help);
                userType.AddEnumValue("IBeam", global::Windows.UI.Core.CoreCursorType.IBeam);
                userType.AddEnumValue("SizeAll", global::Windows.UI.Core.CoreCursorType.SizeAll);
                userType.AddEnumValue("SizeNortheastSouthwest", global::Windows.UI.Core.CoreCursorType.SizeNortheastSouthwest);
                userType.AddEnumValue("SizeNorthSouth", global::Windows.UI.Core.CoreCursorType.SizeNorthSouth);
                userType.AddEnumValue("SizeNorthwestSoutheast", global::Windows.UI.Core.CoreCursorType.SizeNorthwestSoutheast);
                userType.AddEnumValue("SizeWestEast", global::Windows.UI.Core.CoreCursorType.SizeWestEast);
                userType.AddEnumValue("UniversalNo", global::Windows.UI.Core.CoreCursorType.UniversalNo);
                userType.AddEnumValue("UpArrow", global::Windows.UI.Core.CoreCursorType.UpArrow);
                userType.AddEnumValue("Wait", global::Windows.UI.Core.CoreCursorType.Wait);
                xamlType = userType;
                break;

            case 15:   //  System.Enum
                userType = new global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 16:   //  System.ValueType
                userType = new global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 17:   //  Windows.UI.Xaml.DependencyObject
                xamlType = new global::Traktrix.Traktrix_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 18:   //  WinRTXamlToolkit.Controls.Extensions.ClipToBoundsHandler
                userType = new global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 19:   //  Windows.UI.Core.CoreCursor
                userType = new global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 20:   //  WinRTXamlToolkit.Controls.Extensions.CursorDisplayHandler
                userType = new global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 21:   //  Traktrix.MainPage
                userType = new global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_21_MainPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 22:   //  Traktrix.Help
                userType = new global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.SettingsFlyout"));
                userType.Activator = Activate_22_Help;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 23:   //  Traktrix.MusicGallery
                userType = new global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_23_MusicGallery;
                userType.AddMemberName("DefaultViewModel");
                userType.AddMemberName("NavigationHelper");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 24:   //  Traktrix.Common.ObservableDictionary
                userType = new global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.DictionaryAdd = MapAdd_24_ObservableDictionary;
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 25:   //  Traktrix.Common.NavigationHelper
                userType = new global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 26:   //  WinRTXamlToolkit.Controls.ImageToggleButton
                userType = new global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Primitives.ToggleButton"));
                userType.Activator = Activate_26_ImageToggleButton;
                userType.AddMemberName("NormalStateImageSource");
                userType.AddMemberName("CheckedPressedStateImageSource");
                userType.AddMemberName("HoverStateImageUriSource");
                userType.AddMemberName("CheckedStateImageUriSource");
                userType.AddMemberName("RecyclePressedStateImageForHover");
                userType.AddMemberName("Stretch");
                userType.AddMemberName("GenerateMissingImages");
                userType.AddMemberName("RecycleUncheckedStateImagesForCheckedStates");
                userType.AddMemberName("HoverStateImageSource");
                userType.AddMemberName("PressedStateImageSource");
                userType.AddMemberName("DisabledStateImageSource");
                userType.AddMemberName("CheckedStateImageSource");
                userType.AddMemberName("CheckedHoverStateImageSource");
                userType.AddMemberName("CheckedDisabledStateImageSource");
                userType.AddMemberName("NormalStateImageUriSource");
                userType.AddMemberName("PressedStateImageUriSource");
                userType.AddMemberName("DisabledStateImageUriSource");
                userType.AddMemberName("CheckedHoverStateImageUriSource");
                userType.AddMemberName("CheckedPressedStateImageUriSource");
                userType.AddMemberName("CheckedDisabledStateImageUriSource");
                userType.AddMemberName("GeneratedHoverStateLightenAmount");
                userType.AddMemberName("GeneratedPressedStateLightenAmount");
                userType.AddMemberName("GeneratedDisabledStateGrayscaleAmount");
                userType.AddMemberName("GeneratedCheckedStateLightenAmount");
                userType.AddMemberName("GeneratedCheckedHoverStateLightenAmount");
                userType.AddMemberName("GeneratedCheckedPressedStateLightenAmount");
                userType.AddMemberName("GeneratedCheckedDisabledStateGrayscaleAmount");
                xamlType = userType;
                break;

            case 27:   //  Windows.UI.Xaml.Controls.Primitives.ToggleButton
                xamlType = new global::Traktrix.Traktrix_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 28:   //  Windows.UI.Xaml.Media.ImageSource
                xamlType = new global::Traktrix.Traktrix_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 29:   //  System.Uri
                userType = new global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 30:   //  Windows.UI.Xaml.Media.Stretch
                xamlType = new global::Traktrix.Traktrix_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 31:   //  WinRTXamlToolkit.Controls.ImageButton
                userType = new global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Button"));
                userType.Activator = Activate_31_ImageButton;
                userType.AddMemberName("NormalStateImageSource");
                userType.AddMemberName("PressedStateImageSource");
                userType.AddMemberName("RecyclePressedStateImageForHover");
                userType.AddMemberName("HoverStateImageUriSource");
                userType.AddMemberName("Stretch");
                userType.AddMemberName("GenerateMissingImages");
                userType.AddMemberName("NormalStateImageUriSource");
                userType.AddMemberName("PressedStateImageUriSource");
                userType.AddMemberName("HoverStateImageSource");
                userType.AddMemberName("DisabledStateImageSource");
                userType.AddMemberName("DisabledStateImageUriSource");
                userType.AddMemberName("GeneratedHoverStateLightenAmount");
                userType.AddMemberName("GeneratedPressedStateLightenAmount");
                userType.AddMemberName("GeneratedDisabledStateGrayscaleAmount");
                xamlType = userType;
                break;

            case 32:   //  Windows.UI.Xaml.Controls.Button
                xamlType = new global::Traktrix.Traktrix_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 33:   //  Traktrix.PlayingPage
                userType = new global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_33_PlayingPage;
                userType.AddMemberName("DefaultViewModel");
                userType.AddMemberName("NavigationHelper");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 34:   //  Traktrix.SongDetails
                userType = new global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.SettingsFlyout"));
                userType.Activator = Activate_34_SongDetails;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 35:   //  Traktrix.SongItem
                userType = new global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_35_SongItem;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 36:   //  Traktrix.PrivacyPolicy
                userType = new global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.SettingsFlyout"));
                userType.Activator = Activate_36_PrivacyPolicy;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 37:   //  Traktrix.ThemeChanger
                userType = new global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.SettingsFlyout"));
                userType.Activator = Activate_37_ThemeChanger;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 38:   //  Traktrix.TrixterMode
                userType = new global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_38_TrixterMode;
                userType.AddMemberName("DefaultViewModel");
                userType.AddMemberName("NavigationHelper");
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 39:   //  DemoApp.ViewModels.RecordViewModel
                userType = new global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("DemoApp.Common.BindableBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 40:   //  DemoApp.Common.BindableBase
                userType = new global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsLocalType();
                xamlType = userType;
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    _otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Microsoft.Advertising.WinRT.UI.XamlAdControl_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::CSWindowsStoreAppSaveCollection.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_AdControl_ApplicationId(object instance)
        {
            var that = (global::Microsoft.Advertising.WinRT.UI.AdControl)instance;
            return that.ApplicationId;
        }
        private void set_0_AdControl_ApplicationId(object instance, object Value)
        {
            var that = (global::Microsoft.Advertising.WinRT.UI.AdControl)instance;
            that.ApplicationId = (global::System.String)Value;
        }
        private object get_1_AdControl_AdUnitId(object instance)
        {
            var that = (global::Microsoft.Advertising.WinRT.UI.AdControl)instance;
            return that.AdUnitId;
        }
        private void set_1_AdControl_AdUnitId(object instance, object Value)
        {
            var that = (global::Microsoft.Advertising.WinRT.UI.AdControl)instance;
            that.AdUnitId = (global::System.String)Value;
        }
        private object get_2_AdControl_Latitude(object instance)
        {
            var that = (global::Microsoft.Advertising.WinRT.UI.AdControl)instance;
            return that.Latitude;
        }
        private void set_2_AdControl_Latitude(object instance, object Value)
        {
            var that = (global::Microsoft.Advertising.WinRT.UI.AdControl)instance;
            that.Latitude = (global::System.Double)Value;
        }
        private object get_3_AdControl_Longitude(object instance)
        {
            var that = (global::Microsoft.Advertising.WinRT.UI.AdControl)instance;
            return that.Longitude;
        }
        private void set_3_AdControl_Longitude(object instance, object Value)
        {
            var that = (global::Microsoft.Advertising.WinRT.UI.AdControl)instance;
            that.Longitude = (global::System.Double)Value;
        }
        private object get_4_AdControl_IsEngaged(object instance)
        {
            var that = (global::Microsoft.Advertising.WinRT.UI.AdControl)instance;
            return that.IsEngaged;
        }
        private object get_5_AdControl_IsAutoRefreshEnabled(object instance)
        {
            var that = (global::Microsoft.Advertising.WinRT.UI.AdControl)instance;
            return that.IsAutoRefreshEnabled;
        }
        private void set_5_AdControl_IsAutoRefreshEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.Advertising.WinRT.UI.AdControl)instance;
            that.IsAutoRefreshEnabled = (global::System.Boolean)Value;
        }
        private object get_6_AdControl_IsSuspended(object instance)
        {
            var that = (global::Microsoft.Advertising.WinRT.UI.AdControl)instance;
            return that.IsSuspended;
        }
        private object get_7_FrameworkElementExtensions_SystemCursor(object instance)
        {
            return global::WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions.GetSystemCursor((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_7_FrameworkElementExtensions_SystemCursor(object instance, object Value)
        {
            global::WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions.SetSystemCursor((global::Windows.UI.Xaml.DependencyObject)instance, (global::Windows.UI.Core.CoreCursorType)Value);
        }
        private object get_8_FrameworkElementExtensions_ClipToBounds(object instance)
        {
            return global::WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions.GetClipToBounds((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_8_FrameworkElementExtensions_ClipToBounds(object instance, object Value)
        {
            global::WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions.SetClipToBounds((global::Windows.UI.Xaml.DependencyObject)instance, (global::System.Boolean)Value);
        }
        private object get_9_FrameworkElementExtensions_ClipToBoundsHandler(object instance)
        {
            return global::WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions.GetClipToBoundsHandler((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_9_FrameworkElementExtensions_ClipToBoundsHandler(object instance, object Value)
        {
            global::WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions.SetClipToBoundsHandler((global::Windows.UI.Xaml.DependencyObject)instance, (global::WinRTXamlToolkit.Controls.Extensions.ClipToBoundsHandler)Value);
        }
        private object get_10_FrameworkElementExtensions_Cursor(object instance)
        {
            return global::WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions.GetCursor((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_10_FrameworkElementExtensions_Cursor(object instance, object Value)
        {
            global::WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions.SetCursor((global::Windows.UI.Xaml.DependencyObject)instance, (global::Windows.UI.Core.CoreCursor)Value);
        }
        private object get_11_FrameworkElementExtensions_CursorDisplayHandler(object instance)
        {
            return global::WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions.GetCursorDisplayHandler((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_11_FrameworkElementExtensions_CursorDisplayHandler(object instance, object Value)
        {
            global::WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions.SetCursorDisplayHandler((global::Windows.UI.Xaml.DependencyObject)instance, (global::WinRTXamlToolkit.Controls.Extensions.CursorDisplayHandler)Value);
        }
        private object get_12_MusicGallery_DefaultViewModel(object instance)
        {
            var that = (global::Traktrix.MusicGallery)instance;
            return that.DefaultViewModel;
        }
        private object get_13_MusicGallery_NavigationHelper(object instance)
        {
            var that = (global::Traktrix.MusicGallery)instance;
            return that.NavigationHelper;
        }
        private object get_14_ImageToggleButton_NormalStateImageSource(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            return that.NormalStateImageSource;
        }
        private void set_14_ImageToggleButton_NormalStateImageSource(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            that.NormalStateImageSource = (global::Windows.UI.Xaml.Media.ImageSource)Value;
        }
        private object get_15_ImageToggleButton_CheckedPressedStateImageSource(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            return that.CheckedPressedStateImageSource;
        }
        private void set_15_ImageToggleButton_CheckedPressedStateImageSource(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            that.CheckedPressedStateImageSource = (global::Windows.UI.Xaml.Media.ImageSource)Value;
        }
        private object get_16_ImageToggleButton_HoverStateImageUriSource(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            return that.HoverStateImageUriSource;
        }
        private void set_16_ImageToggleButton_HoverStateImageUriSource(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            that.HoverStateImageUriSource = (global::System.Uri)Value;
        }
        private object get_17_ImageToggleButton_CheckedStateImageUriSource(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            return that.CheckedStateImageUriSource;
        }
        private void set_17_ImageToggleButton_CheckedStateImageUriSource(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            that.CheckedStateImageUriSource = (global::System.Uri)Value;
        }
        private object get_18_ImageToggleButton_RecyclePressedStateImageForHover(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            return that.RecyclePressedStateImageForHover;
        }
        private void set_18_ImageToggleButton_RecyclePressedStateImageForHover(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            that.RecyclePressedStateImageForHover = (global::System.Boolean)Value;
        }
        private object get_19_ImageToggleButton_Stretch(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            return that.Stretch;
        }
        private void set_19_ImageToggleButton_Stretch(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            that.Stretch = (global::Windows.UI.Xaml.Media.Stretch)Value;
        }
        private object get_20_ImageToggleButton_GenerateMissingImages(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            return that.GenerateMissingImages;
        }
        private void set_20_ImageToggleButton_GenerateMissingImages(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            that.GenerateMissingImages = (global::System.Boolean)Value;
        }
        private object get_21_ImageToggleButton_RecycleUncheckedStateImagesForCheckedStates(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            return that.RecycleUncheckedStateImagesForCheckedStates;
        }
        private void set_21_ImageToggleButton_RecycleUncheckedStateImagesForCheckedStates(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            that.RecycleUncheckedStateImagesForCheckedStates = (global::System.Boolean)Value;
        }
        private object get_22_ImageToggleButton_HoverStateImageSource(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            return that.HoverStateImageSource;
        }
        private void set_22_ImageToggleButton_HoverStateImageSource(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            that.HoverStateImageSource = (global::Windows.UI.Xaml.Media.ImageSource)Value;
        }
        private object get_23_ImageToggleButton_PressedStateImageSource(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            return that.PressedStateImageSource;
        }
        private void set_23_ImageToggleButton_PressedStateImageSource(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            that.PressedStateImageSource = (global::Windows.UI.Xaml.Media.ImageSource)Value;
        }
        private object get_24_ImageToggleButton_DisabledStateImageSource(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            return that.DisabledStateImageSource;
        }
        private void set_24_ImageToggleButton_DisabledStateImageSource(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            that.DisabledStateImageSource = (global::Windows.UI.Xaml.Media.ImageSource)Value;
        }
        private object get_25_ImageToggleButton_CheckedStateImageSource(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            return that.CheckedStateImageSource;
        }
        private void set_25_ImageToggleButton_CheckedStateImageSource(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            that.CheckedStateImageSource = (global::Windows.UI.Xaml.Media.ImageSource)Value;
        }
        private object get_26_ImageToggleButton_CheckedHoverStateImageSource(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            return that.CheckedHoverStateImageSource;
        }
        private void set_26_ImageToggleButton_CheckedHoverStateImageSource(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            that.CheckedHoverStateImageSource = (global::Windows.UI.Xaml.Media.ImageSource)Value;
        }
        private object get_27_ImageToggleButton_CheckedDisabledStateImageSource(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            return that.CheckedDisabledStateImageSource;
        }
        private void set_27_ImageToggleButton_CheckedDisabledStateImageSource(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            that.CheckedDisabledStateImageSource = (global::Windows.UI.Xaml.Media.ImageSource)Value;
        }
        private object get_28_ImageToggleButton_NormalStateImageUriSource(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            return that.NormalStateImageUriSource;
        }
        private void set_28_ImageToggleButton_NormalStateImageUriSource(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            that.NormalStateImageUriSource = (global::System.Uri)Value;
        }
        private object get_29_ImageToggleButton_PressedStateImageUriSource(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            return that.PressedStateImageUriSource;
        }
        private void set_29_ImageToggleButton_PressedStateImageUriSource(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            that.PressedStateImageUriSource = (global::System.Uri)Value;
        }
        private object get_30_ImageToggleButton_DisabledStateImageUriSource(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            return that.DisabledStateImageUriSource;
        }
        private void set_30_ImageToggleButton_DisabledStateImageUriSource(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            that.DisabledStateImageUriSource = (global::System.Uri)Value;
        }
        private object get_31_ImageToggleButton_CheckedHoverStateImageUriSource(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            return that.CheckedHoverStateImageUriSource;
        }
        private void set_31_ImageToggleButton_CheckedHoverStateImageUriSource(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            that.CheckedHoverStateImageUriSource = (global::System.Uri)Value;
        }
        private object get_32_ImageToggleButton_CheckedPressedStateImageUriSource(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            return that.CheckedPressedStateImageUriSource;
        }
        private void set_32_ImageToggleButton_CheckedPressedStateImageUriSource(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            that.CheckedPressedStateImageUriSource = (global::System.Uri)Value;
        }
        private object get_33_ImageToggleButton_CheckedDisabledStateImageUriSource(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            return that.CheckedDisabledStateImageUriSource;
        }
        private void set_33_ImageToggleButton_CheckedDisabledStateImageUriSource(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            that.CheckedDisabledStateImageUriSource = (global::System.Uri)Value;
        }
        private object get_34_ImageToggleButton_GeneratedHoverStateLightenAmount(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            return that.GeneratedHoverStateLightenAmount;
        }
        private void set_34_ImageToggleButton_GeneratedHoverStateLightenAmount(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            that.GeneratedHoverStateLightenAmount = (global::System.Double)Value;
        }
        private object get_35_ImageToggleButton_GeneratedPressedStateLightenAmount(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            return that.GeneratedPressedStateLightenAmount;
        }
        private void set_35_ImageToggleButton_GeneratedPressedStateLightenAmount(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            that.GeneratedPressedStateLightenAmount = (global::System.Double)Value;
        }
        private object get_36_ImageToggleButton_GeneratedDisabledStateGrayscaleAmount(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            return that.GeneratedDisabledStateGrayscaleAmount;
        }
        private void set_36_ImageToggleButton_GeneratedDisabledStateGrayscaleAmount(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            that.GeneratedDisabledStateGrayscaleAmount = (global::System.Double)Value;
        }
        private object get_37_ImageToggleButton_GeneratedCheckedStateLightenAmount(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            return that.GeneratedCheckedStateLightenAmount;
        }
        private void set_37_ImageToggleButton_GeneratedCheckedStateLightenAmount(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            that.GeneratedCheckedStateLightenAmount = (global::System.Double)Value;
        }
        private object get_38_ImageToggleButton_GeneratedCheckedHoverStateLightenAmount(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            return that.GeneratedCheckedHoverStateLightenAmount;
        }
        private void set_38_ImageToggleButton_GeneratedCheckedHoverStateLightenAmount(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            that.GeneratedCheckedHoverStateLightenAmount = (global::System.Double)Value;
        }
        private object get_39_ImageToggleButton_GeneratedCheckedPressedStateLightenAmount(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            return that.GeneratedCheckedPressedStateLightenAmount;
        }
        private void set_39_ImageToggleButton_GeneratedCheckedPressedStateLightenAmount(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            that.GeneratedCheckedPressedStateLightenAmount = (global::System.Double)Value;
        }
        private object get_40_ImageToggleButton_GeneratedCheckedDisabledStateGrayscaleAmount(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            return that.GeneratedCheckedDisabledStateGrayscaleAmount;
        }
        private void set_40_ImageToggleButton_GeneratedCheckedDisabledStateGrayscaleAmount(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            that.GeneratedCheckedDisabledStateGrayscaleAmount = (global::System.Double)Value;
        }
        private object get_41_ImageButton_NormalStateImageSource(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageButton)instance;
            return that.NormalStateImageSource;
        }
        private void set_41_ImageButton_NormalStateImageSource(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageButton)instance;
            that.NormalStateImageSource = (global::Windows.UI.Xaml.Media.ImageSource)Value;
        }
        private object get_42_ImageButton_PressedStateImageSource(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageButton)instance;
            return that.PressedStateImageSource;
        }
        private void set_42_ImageButton_PressedStateImageSource(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageButton)instance;
            that.PressedStateImageSource = (global::Windows.UI.Xaml.Media.ImageSource)Value;
        }
        private object get_43_ImageButton_RecyclePressedStateImageForHover(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageButton)instance;
            return that.RecyclePressedStateImageForHover;
        }
        private void set_43_ImageButton_RecyclePressedStateImageForHover(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageButton)instance;
            that.RecyclePressedStateImageForHover = (global::System.Boolean)Value;
        }
        private object get_44_ImageButton_HoverStateImageUriSource(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageButton)instance;
            return that.HoverStateImageUriSource;
        }
        private void set_44_ImageButton_HoverStateImageUriSource(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageButton)instance;
            that.HoverStateImageUriSource = (global::System.Uri)Value;
        }
        private object get_45_ImageButton_Stretch(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageButton)instance;
            return that.Stretch;
        }
        private void set_45_ImageButton_Stretch(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageButton)instance;
            that.Stretch = (global::Windows.UI.Xaml.Media.Stretch)Value;
        }
        private object get_46_ImageButton_GenerateMissingImages(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageButton)instance;
            return that.GenerateMissingImages;
        }
        private void set_46_ImageButton_GenerateMissingImages(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageButton)instance;
            that.GenerateMissingImages = (global::System.Boolean)Value;
        }
        private object get_47_ImageButton_NormalStateImageUriSource(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageButton)instance;
            return that.NormalStateImageUriSource;
        }
        private void set_47_ImageButton_NormalStateImageUriSource(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageButton)instance;
            that.NormalStateImageUriSource = (global::System.Uri)Value;
        }
        private object get_48_ImageButton_PressedStateImageUriSource(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageButton)instance;
            return that.PressedStateImageUriSource;
        }
        private void set_48_ImageButton_PressedStateImageUriSource(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageButton)instance;
            that.PressedStateImageUriSource = (global::System.Uri)Value;
        }
        private object get_49_ImageButton_HoverStateImageSource(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageButton)instance;
            return that.HoverStateImageSource;
        }
        private void set_49_ImageButton_HoverStateImageSource(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageButton)instance;
            that.HoverStateImageSource = (global::Windows.UI.Xaml.Media.ImageSource)Value;
        }
        private object get_50_ImageButton_DisabledStateImageSource(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageButton)instance;
            return that.DisabledStateImageSource;
        }
        private void set_50_ImageButton_DisabledStateImageSource(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageButton)instance;
            that.DisabledStateImageSource = (global::Windows.UI.Xaml.Media.ImageSource)Value;
        }
        private object get_51_ImageButton_DisabledStateImageUriSource(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageButton)instance;
            return that.DisabledStateImageUriSource;
        }
        private void set_51_ImageButton_DisabledStateImageUriSource(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageButton)instance;
            that.DisabledStateImageUriSource = (global::System.Uri)Value;
        }
        private object get_52_ImageButton_GeneratedHoverStateLightenAmount(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageButton)instance;
            return that.GeneratedHoverStateLightenAmount;
        }
        private void set_52_ImageButton_GeneratedHoverStateLightenAmount(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageButton)instance;
            that.GeneratedHoverStateLightenAmount = (global::System.Double)Value;
        }
        private object get_53_ImageButton_GeneratedPressedStateLightenAmount(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageButton)instance;
            return that.GeneratedPressedStateLightenAmount;
        }
        private void set_53_ImageButton_GeneratedPressedStateLightenAmount(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageButton)instance;
            that.GeneratedPressedStateLightenAmount = (global::System.Double)Value;
        }
        private object get_54_ImageButton_GeneratedDisabledStateGrayscaleAmount(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageButton)instance;
            return that.GeneratedDisabledStateGrayscaleAmount;
        }
        private void set_54_ImageButton_GeneratedDisabledStateGrayscaleAmount(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageButton)instance;
            that.GeneratedDisabledStateGrayscaleAmount = (global::System.Double)Value;
        }
        private object get_55_PlayingPage_DefaultViewModel(object instance)
        {
            var that = (global::Traktrix.PlayingPage)instance;
            return that.DefaultViewModel;
        }
        private object get_56_PlayingPage_NavigationHelper(object instance)
        {
            var that = (global::Traktrix.PlayingPage)instance;
            return that.NavigationHelper;
        }
        private object get_57_TrixterMode_DefaultViewModel(object instance)
        {
            var that = (global::Traktrix.TrixterMode)instance;
            return that.DefaultViewModel;
        }
        private object get_58_TrixterMode_NavigationHelper(object instance)
        {
            var that = (global::Traktrix.TrixterMode)instance;
            return that.NavigationHelper;
        }
        private object get_59_TrixterMode_ViewModel(object instance)
        {
            var that = (global::Traktrix.TrixterMode)instance;
            return that.ViewModel;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::Traktrix.Traktrix_XamlTypeInfo.XamlMember xamlMember = null;
            global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Microsoft.Advertising.WinRT.UI.AdControl.ApplicationId":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Advertising.WinRT.UI.AdControl");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "ApplicationId", "String");
                xamlMember.Getter = get_0_AdControl_ApplicationId;
                xamlMember.Setter = set_0_AdControl_ApplicationId;
                break;
            case "Microsoft.Advertising.WinRT.UI.AdControl.AdUnitId":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Advertising.WinRT.UI.AdControl");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "AdUnitId", "String");
                xamlMember.Getter = get_1_AdControl_AdUnitId;
                xamlMember.Setter = set_1_AdControl_AdUnitId;
                break;
            case "Microsoft.Advertising.WinRT.UI.AdControl.Latitude":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Advertising.WinRT.UI.AdControl");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "Latitude", "Double");
                xamlMember.Getter = get_2_AdControl_Latitude;
                xamlMember.Setter = set_2_AdControl_Latitude;
                break;
            case "Microsoft.Advertising.WinRT.UI.AdControl.Longitude":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Advertising.WinRT.UI.AdControl");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "Longitude", "Double");
                xamlMember.Getter = get_3_AdControl_Longitude;
                xamlMember.Setter = set_3_AdControl_Longitude;
                break;
            case "Microsoft.Advertising.WinRT.UI.AdControl.IsEngaged":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Advertising.WinRT.UI.AdControl");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "IsEngaged", "Boolean");
                xamlMember.Getter = get_4_AdControl_IsEngaged;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.Advertising.WinRT.UI.AdControl.IsAutoRefreshEnabled":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Advertising.WinRT.UI.AdControl");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "IsAutoRefreshEnabled", "Boolean");
                xamlMember.Getter = get_5_AdControl_IsAutoRefreshEnabled;
                xamlMember.Setter = set_5_AdControl_IsAutoRefreshEnabled;
                break;
            case "Microsoft.Advertising.WinRT.UI.AdControl.IsSuspended":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Advertising.WinRT.UI.AdControl");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "IsSuspended", "Boolean");
                xamlMember.Getter = get_6_AdControl_IsSuspended;
                xamlMember.SetIsReadOnly();
                break;
            case "WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions.SystemCursor":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "SystemCursor", "Windows.UI.Core.CoreCursorType");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_7_FrameworkElementExtensions_SystemCursor;
                xamlMember.Setter = set_7_FrameworkElementExtensions_SystemCursor;
                break;
            case "WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions.ClipToBounds":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "ClipToBounds", "Boolean");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_8_FrameworkElementExtensions_ClipToBounds;
                xamlMember.Setter = set_8_FrameworkElementExtensions_ClipToBounds;
                break;
            case "WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions.ClipToBoundsHandler":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "ClipToBoundsHandler", "WinRTXamlToolkit.Controls.Extensions.ClipToBoundsHandler");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_9_FrameworkElementExtensions_ClipToBoundsHandler;
                xamlMember.Setter = set_9_FrameworkElementExtensions_ClipToBoundsHandler;
                break;
            case "WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions.Cursor":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "Cursor", "Windows.UI.Core.CoreCursor");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_10_FrameworkElementExtensions_Cursor;
                xamlMember.Setter = set_10_FrameworkElementExtensions_Cursor;
                break;
            case "WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions.CursorDisplayHandler":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "CursorDisplayHandler", "WinRTXamlToolkit.Controls.Extensions.CursorDisplayHandler");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_11_FrameworkElementExtensions_CursorDisplayHandler;
                xamlMember.Setter = set_11_FrameworkElementExtensions_CursorDisplayHandler;
                break;
            case "Traktrix.MusicGallery.DefaultViewModel":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Traktrix.MusicGallery");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "Traktrix.Common.ObservableDictionary");
                xamlMember.Getter = get_12_MusicGallery_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Traktrix.MusicGallery.NavigationHelper":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Traktrix.MusicGallery");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "NavigationHelper", "Traktrix.Common.NavigationHelper");
                xamlMember.Getter = get_13_MusicGallery_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "WinRTXamlToolkit.Controls.ImageToggleButton.NormalStateImageSource":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageToggleButton");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "NormalStateImageSource", "Windows.UI.Xaml.Media.ImageSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_14_ImageToggleButton_NormalStateImageSource;
                xamlMember.Setter = set_14_ImageToggleButton_NormalStateImageSource;
                break;
            case "WinRTXamlToolkit.Controls.ImageToggleButton.CheckedPressedStateImageSource":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageToggleButton");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "CheckedPressedStateImageSource", "Windows.UI.Xaml.Media.ImageSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_15_ImageToggleButton_CheckedPressedStateImageSource;
                xamlMember.Setter = set_15_ImageToggleButton_CheckedPressedStateImageSource;
                break;
            case "WinRTXamlToolkit.Controls.ImageToggleButton.HoverStateImageUriSource":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageToggleButton");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "HoverStateImageUriSource", "System.Uri");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_16_ImageToggleButton_HoverStateImageUriSource;
                xamlMember.Setter = set_16_ImageToggleButton_HoverStateImageUriSource;
                break;
            case "WinRTXamlToolkit.Controls.ImageToggleButton.CheckedStateImageUriSource":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageToggleButton");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "CheckedStateImageUriSource", "System.Uri");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_17_ImageToggleButton_CheckedStateImageUriSource;
                xamlMember.Setter = set_17_ImageToggleButton_CheckedStateImageUriSource;
                break;
            case "WinRTXamlToolkit.Controls.ImageToggleButton.RecyclePressedStateImageForHover":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageToggleButton");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "RecyclePressedStateImageForHover", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_18_ImageToggleButton_RecyclePressedStateImageForHover;
                xamlMember.Setter = set_18_ImageToggleButton_RecyclePressedStateImageForHover;
                break;
            case "WinRTXamlToolkit.Controls.ImageToggleButton.Stretch":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageToggleButton");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "Stretch", "Windows.UI.Xaml.Media.Stretch");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_19_ImageToggleButton_Stretch;
                xamlMember.Setter = set_19_ImageToggleButton_Stretch;
                break;
            case "WinRTXamlToolkit.Controls.ImageToggleButton.GenerateMissingImages":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageToggleButton");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "GenerateMissingImages", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_20_ImageToggleButton_GenerateMissingImages;
                xamlMember.Setter = set_20_ImageToggleButton_GenerateMissingImages;
                break;
            case "WinRTXamlToolkit.Controls.ImageToggleButton.RecycleUncheckedStateImagesForCheckedStates":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageToggleButton");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "RecycleUncheckedStateImagesForCheckedStates", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_21_ImageToggleButton_RecycleUncheckedStateImagesForCheckedStates;
                xamlMember.Setter = set_21_ImageToggleButton_RecycleUncheckedStateImagesForCheckedStates;
                break;
            case "WinRTXamlToolkit.Controls.ImageToggleButton.HoverStateImageSource":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageToggleButton");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "HoverStateImageSource", "Windows.UI.Xaml.Media.ImageSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_22_ImageToggleButton_HoverStateImageSource;
                xamlMember.Setter = set_22_ImageToggleButton_HoverStateImageSource;
                break;
            case "WinRTXamlToolkit.Controls.ImageToggleButton.PressedStateImageSource":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageToggleButton");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "PressedStateImageSource", "Windows.UI.Xaml.Media.ImageSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_23_ImageToggleButton_PressedStateImageSource;
                xamlMember.Setter = set_23_ImageToggleButton_PressedStateImageSource;
                break;
            case "WinRTXamlToolkit.Controls.ImageToggleButton.DisabledStateImageSource":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageToggleButton");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "DisabledStateImageSource", "Windows.UI.Xaml.Media.ImageSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_24_ImageToggleButton_DisabledStateImageSource;
                xamlMember.Setter = set_24_ImageToggleButton_DisabledStateImageSource;
                break;
            case "WinRTXamlToolkit.Controls.ImageToggleButton.CheckedStateImageSource":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageToggleButton");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "CheckedStateImageSource", "Windows.UI.Xaml.Media.ImageSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_25_ImageToggleButton_CheckedStateImageSource;
                xamlMember.Setter = set_25_ImageToggleButton_CheckedStateImageSource;
                break;
            case "WinRTXamlToolkit.Controls.ImageToggleButton.CheckedHoverStateImageSource":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageToggleButton");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "CheckedHoverStateImageSource", "Windows.UI.Xaml.Media.ImageSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_26_ImageToggleButton_CheckedHoverStateImageSource;
                xamlMember.Setter = set_26_ImageToggleButton_CheckedHoverStateImageSource;
                break;
            case "WinRTXamlToolkit.Controls.ImageToggleButton.CheckedDisabledStateImageSource":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageToggleButton");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "CheckedDisabledStateImageSource", "Windows.UI.Xaml.Media.ImageSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_27_ImageToggleButton_CheckedDisabledStateImageSource;
                xamlMember.Setter = set_27_ImageToggleButton_CheckedDisabledStateImageSource;
                break;
            case "WinRTXamlToolkit.Controls.ImageToggleButton.NormalStateImageUriSource":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageToggleButton");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "NormalStateImageUriSource", "System.Uri");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_28_ImageToggleButton_NormalStateImageUriSource;
                xamlMember.Setter = set_28_ImageToggleButton_NormalStateImageUriSource;
                break;
            case "WinRTXamlToolkit.Controls.ImageToggleButton.PressedStateImageUriSource":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageToggleButton");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "PressedStateImageUriSource", "System.Uri");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_29_ImageToggleButton_PressedStateImageUriSource;
                xamlMember.Setter = set_29_ImageToggleButton_PressedStateImageUriSource;
                break;
            case "WinRTXamlToolkit.Controls.ImageToggleButton.DisabledStateImageUriSource":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageToggleButton");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "DisabledStateImageUriSource", "System.Uri");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_30_ImageToggleButton_DisabledStateImageUriSource;
                xamlMember.Setter = set_30_ImageToggleButton_DisabledStateImageUriSource;
                break;
            case "WinRTXamlToolkit.Controls.ImageToggleButton.CheckedHoverStateImageUriSource":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageToggleButton");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "CheckedHoverStateImageUriSource", "System.Uri");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_31_ImageToggleButton_CheckedHoverStateImageUriSource;
                xamlMember.Setter = set_31_ImageToggleButton_CheckedHoverStateImageUriSource;
                break;
            case "WinRTXamlToolkit.Controls.ImageToggleButton.CheckedPressedStateImageUriSource":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageToggleButton");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "CheckedPressedStateImageUriSource", "System.Uri");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_32_ImageToggleButton_CheckedPressedStateImageUriSource;
                xamlMember.Setter = set_32_ImageToggleButton_CheckedPressedStateImageUriSource;
                break;
            case "WinRTXamlToolkit.Controls.ImageToggleButton.CheckedDisabledStateImageUriSource":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageToggleButton");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "CheckedDisabledStateImageUriSource", "System.Uri");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_33_ImageToggleButton_CheckedDisabledStateImageUriSource;
                xamlMember.Setter = set_33_ImageToggleButton_CheckedDisabledStateImageUriSource;
                break;
            case "WinRTXamlToolkit.Controls.ImageToggleButton.GeneratedHoverStateLightenAmount":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageToggleButton");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "GeneratedHoverStateLightenAmount", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_34_ImageToggleButton_GeneratedHoverStateLightenAmount;
                xamlMember.Setter = set_34_ImageToggleButton_GeneratedHoverStateLightenAmount;
                break;
            case "WinRTXamlToolkit.Controls.ImageToggleButton.GeneratedPressedStateLightenAmount":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageToggleButton");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "GeneratedPressedStateLightenAmount", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_35_ImageToggleButton_GeneratedPressedStateLightenAmount;
                xamlMember.Setter = set_35_ImageToggleButton_GeneratedPressedStateLightenAmount;
                break;
            case "WinRTXamlToolkit.Controls.ImageToggleButton.GeneratedDisabledStateGrayscaleAmount":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageToggleButton");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "GeneratedDisabledStateGrayscaleAmount", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_36_ImageToggleButton_GeneratedDisabledStateGrayscaleAmount;
                xamlMember.Setter = set_36_ImageToggleButton_GeneratedDisabledStateGrayscaleAmount;
                break;
            case "WinRTXamlToolkit.Controls.ImageToggleButton.GeneratedCheckedStateLightenAmount":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageToggleButton");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "GeneratedCheckedStateLightenAmount", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_37_ImageToggleButton_GeneratedCheckedStateLightenAmount;
                xamlMember.Setter = set_37_ImageToggleButton_GeneratedCheckedStateLightenAmount;
                break;
            case "WinRTXamlToolkit.Controls.ImageToggleButton.GeneratedCheckedHoverStateLightenAmount":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageToggleButton");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "GeneratedCheckedHoverStateLightenAmount", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_38_ImageToggleButton_GeneratedCheckedHoverStateLightenAmount;
                xamlMember.Setter = set_38_ImageToggleButton_GeneratedCheckedHoverStateLightenAmount;
                break;
            case "WinRTXamlToolkit.Controls.ImageToggleButton.GeneratedCheckedPressedStateLightenAmount":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageToggleButton");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "GeneratedCheckedPressedStateLightenAmount", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_39_ImageToggleButton_GeneratedCheckedPressedStateLightenAmount;
                xamlMember.Setter = set_39_ImageToggleButton_GeneratedCheckedPressedStateLightenAmount;
                break;
            case "WinRTXamlToolkit.Controls.ImageToggleButton.GeneratedCheckedDisabledStateGrayscaleAmount":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageToggleButton");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "GeneratedCheckedDisabledStateGrayscaleAmount", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_40_ImageToggleButton_GeneratedCheckedDisabledStateGrayscaleAmount;
                xamlMember.Setter = set_40_ImageToggleButton_GeneratedCheckedDisabledStateGrayscaleAmount;
                break;
            case "WinRTXamlToolkit.Controls.ImageButton.NormalStateImageSource":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageButton");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "NormalStateImageSource", "Windows.UI.Xaml.Media.ImageSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_41_ImageButton_NormalStateImageSource;
                xamlMember.Setter = set_41_ImageButton_NormalStateImageSource;
                break;
            case "WinRTXamlToolkit.Controls.ImageButton.PressedStateImageSource":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageButton");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "PressedStateImageSource", "Windows.UI.Xaml.Media.ImageSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_42_ImageButton_PressedStateImageSource;
                xamlMember.Setter = set_42_ImageButton_PressedStateImageSource;
                break;
            case "WinRTXamlToolkit.Controls.ImageButton.RecyclePressedStateImageForHover":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageButton");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "RecyclePressedStateImageForHover", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_43_ImageButton_RecyclePressedStateImageForHover;
                xamlMember.Setter = set_43_ImageButton_RecyclePressedStateImageForHover;
                break;
            case "WinRTXamlToolkit.Controls.ImageButton.HoverStateImageUriSource":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageButton");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "HoverStateImageUriSource", "System.Uri");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_44_ImageButton_HoverStateImageUriSource;
                xamlMember.Setter = set_44_ImageButton_HoverStateImageUriSource;
                break;
            case "WinRTXamlToolkit.Controls.ImageButton.Stretch":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageButton");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "Stretch", "Windows.UI.Xaml.Media.Stretch");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_45_ImageButton_Stretch;
                xamlMember.Setter = set_45_ImageButton_Stretch;
                break;
            case "WinRTXamlToolkit.Controls.ImageButton.GenerateMissingImages":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageButton");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "GenerateMissingImages", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_46_ImageButton_GenerateMissingImages;
                xamlMember.Setter = set_46_ImageButton_GenerateMissingImages;
                break;
            case "WinRTXamlToolkit.Controls.ImageButton.NormalStateImageUriSource":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageButton");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "NormalStateImageUriSource", "System.Uri");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_47_ImageButton_NormalStateImageUriSource;
                xamlMember.Setter = set_47_ImageButton_NormalStateImageUriSource;
                break;
            case "WinRTXamlToolkit.Controls.ImageButton.PressedStateImageUriSource":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageButton");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "PressedStateImageUriSource", "System.Uri");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_48_ImageButton_PressedStateImageUriSource;
                xamlMember.Setter = set_48_ImageButton_PressedStateImageUriSource;
                break;
            case "WinRTXamlToolkit.Controls.ImageButton.HoverStateImageSource":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageButton");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "HoverStateImageSource", "Windows.UI.Xaml.Media.ImageSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_49_ImageButton_HoverStateImageSource;
                xamlMember.Setter = set_49_ImageButton_HoverStateImageSource;
                break;
            case "WinRTXamlToolkit.Controls.ImageButton.DisabledStateImageSource":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageButton");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "DisabledStateImageSource", "Windows.UI.Xaml.Media.ImageSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_50_ImageButton_DisabledStateImageSource;
                xamlMember.Setter = set_50_ImageButton_DisabledStateImageSource;
                break;
            case "WinRTXamlToolkit.Controls.ImageButton.DisabledStateImageUriSource":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageButton");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "DisabledStateImageUriSource", "System.Uri");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_51_ImageButton_DisabledStateImageUriSource;
                xamlMember.Setter = set_51_ImageButton_DisabledStateImageUriSource;
                break;
            case "WinRTXamlToolkit.Controls.ImageButton.GeneratedHoverStateLightenAmount":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageButton");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "GeneratedHoverStateLightenAmount", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_52_ImageButton_GeneratedHoverStateLightenAmount;
                xamlMember.Setter = set_52_ImageButton_GeneratedHoverStateLightenAmount;
                break;
            case "WinRTXamlToolkit.Controls.ImageButton.GeneratedPressedStateLightenAmount":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageButton");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "GeneratedPressedStateLightenAmount", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_53_ImageButton_GeneratedPressedStateLightenAmount;
                xamlMember.Setter = set_53_ImageButton_GeneratedPressedStateLightenAmount;
                break;
            case "WinRTXamlToolkit.Controls.ImageButton.GeneratedDisabledStateGrayscaleAmount":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageButton");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "GeneratedDisabledStateGrayscaleAmount", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_54_ImageButton_GeneratedDisabledStateGrayscaleAmount;
                xamlMember.Setter = set_54_ImageButton_GeneratedDisabledStateGrayscaleAmount;
                break;
            case "Traktrix.PlayingPage.DefaultViewModel":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Traktrix.PlayingPage");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "Traktrix.Common.ObservableDictionary");
                xamlMember.Getter = get_55_PlayingPage_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Traktrix.PlayingPage.NavigationHelper":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Traktrix.PlayingPage");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "NavigationHelper", "Traktrix.Common.NavigationHelper");
                xamlMember.Getter = get_56_PlayingPage_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "Traktrix.TrixterMode.DefaultViewModel":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Traktrix.TrixterMode");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "Traktrix.Common.ObservableDictionary");
                xamlMember.Getter = get_57_TrixterMode_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Traktrix.TrixterMode.NavigationHelper":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Traktrix.TrixterMode");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "NavigationHelper", "Traktrix.Common.NavigationHelper");
                xamlMember.Getter = get_58_TrixterMode_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "Traktrix.TrixterMode.ViewModel":
                userType = (global::Traktrix.Traktrix_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Traktrix.TrixterMode");
                xamlMember = new global::Traktrix.Traktrix_XamlTypeInfo.XamlMember(this, "ViewModel", "DemoApp.ViewModels.RecordViewModel");
                xamlMember.Getter = get_59_TrixterMode_ViewModel;
                xamlMember.SetIsReadOnly();
                break;
            }
            return xamlMember;
        }
    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::Traktrix.Traktrix_XamlTypeInfo.XamlSystemBaseType
    {
        global::Traktrix.Traktrix_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::Traktrix.Traktrix_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::Traktrix.Traktrix_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::Traktrix.Traktrix_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


